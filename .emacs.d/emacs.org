#+title: Emacs Literate Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Package Management

#+begin_src emacs-lisp

  ;; Add melpa repo to package archives.
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  ;; Run autoloads on packages.
  (package-initialize)

  ;; Check if archive contents exist.
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Ensure that `use-package` is installed.
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))


  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* GUI Modifcations

*NOTE*: I use GUI here as in the "window" or window related widgets like the menubar, etc.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (tool-bar-mode -1)   ; disable toolbar.
  (scroll-bar-mode -1) ; disable scrollbar.
  (menu-bar-mode -1)   ; disable menubar.

  ; enable line numbers.
  (global-display-line-numbers-mode t)

  ;; TODO: write a hook here to disable line numbers in org mode.

#+end_src

* Miscellaneous Settings

** Autopairs

#+begin_src emacs-lisp

  (electric-pair-mode 1)

#+end_src

** Fonts

*TODO*: find a way to enable font ligatures.

#+begin_src emacs-lisp

  ;; install `all-the-icons` font.
  (use-package all-the-icons)

  (set-face-attribute 'default nil :font "Source Code Pro" :height 110)

#+end_src

** Rich Presence 

#+begin_src emacs-lisp

  (use-package elcord
    :init (elcord-mode))

#+end_src

* Keybinds

** Evil Mode

#+begin_src emacs-lisp

  ;; Install `evil mode`, which is a vim keybind emulator.
  (use-package evil
    :init (evil-mode 1))

#+end_src

** Misc. Keybinds

#+begin_src emacs-lisp

  ;; Escape key quits prompts.
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
#+end_src

** Neotree

It's like nerd tree, but for emacs.

#+begin_src emacs-lisp

  (use-package neotree
    :init (global-set-key [f8] 'neotree-toggle))

#+end_src

* User Interface

** Modeline

#+begin_src emacs-lisp

;; Install `doom-modeline`, similar to airline from vim.
(use-package doom-modeline
  :init (doom-modeline-mode 1))

#+end_src

** Theme

#+begin_src emacs-lisp

  ;; Install and configure `doom-themes`
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

** Centaur Tabs

Tabline-esque package for Emacs.

#+begin_src emacs-lisp

  (use-package centaur-tabs
    :demand
    :config
      (centaur-tabs-mode t)
      (setq centaur-tabs-set-icons t)
      (setq centaur-tabs-style "bar")
      (setq centaur-tabs-height 32)
      (setq centaur-tabs-set-bar 'left)
      (setq centaur-tabs-gray-out-icons 'buffer)
    :bind
    (:map evil-normal-state-map
      ("g t" . centaur-tabs-forward)
      ("g T" . centaur-tabs-backward)))

#+end_src

** Org Mode

*** Auto Tangle on Save

#+begin_src emacs-lisp

  ;; Automatically tangle our emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  
#+end_src

** Ivy

"Ivy is an interactive interface for completion in Emacs. Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc." - Ivy User Manual

#+begin_src emacs-lisp

  ;; Install and configure keybinds for `Ivy`.
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)	
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :init (ivy-mode 1))

#+end_src

*** Ivy-Rich

#+begin_src emacs-lisp

  (use-package ivy-rich
    :init (ivy-rich-mode 1))
  
#+end_src

*** Swiper

"Isearch with an overview. Oh, man!"

#+begin_src emacs-lisp

  (use-package swiper)

#+end_src

*** Counsel

"Various completion functions using Ivy".

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
      :map minibuffer-local-map
      ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

#+end_src

** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :init (global-company-mode))
  
#+end_src

** Helpful

"A better Emacs \*help\* buffer"
*NOTE*: Might move this over to the keybinds sections.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Which-Key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.1))

#+end_src

** Language Server Protocol Related

** Eglot

#+begin_src emacs-lisp

  (use-package eglot
    ; this'll work for now, but should have a language specific list.
    :hook (prog-mode . eglot-ensure))

#+end_src

* Language Specific

** Lisp

Not technically `Lisp` specific, since I haven't set up the hooks yet, but we'll leave it here for now.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Clojure

*TODO*: for now it seems like I could just do a likkle dolist, since no config I guess.

#+begin_src emacs-lisp

  (use-package clojure-mode)
  (use-package cider)

#+end_src
